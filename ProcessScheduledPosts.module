<?php

/**
 * ProcessWire Process Scheduled Posts Module
 *
 * Copyright 2011 by Jasper Metselaar (jasper@formmailer.net)
 * Licensed under GNU/GPL v2, see http://processwire.com/about/license/
 *
 * This module allows makes it possible to schedule (un)publication of
 * pages. This version of the plugin module relies on the LazyCron 
 * module by Ryan Cramer.
 *
 * Module is intended for:
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * Usage:
 * ======
 * 1. 	Place the ProcessScheduledPosts.module file into the 
 *		site/modules folder and install the plugin from the admin
 *		area.
 * 2.	Install the LazyCron module (if you haven't already). This
 *		module is part of the Processwire core, but it isn't 
 *		activated by default.
 * 3.	Add the following date fields to your template (feel free to 
 *		activate the date picker input option if you like): 
 *		publish_from
 *		publish_until
 * 4.	That't all. LazyCron will run take care of (un)publishing
 *		your pages that have a the publish dates set. It will run
 *		daily. 
 *		Please note: LazyCron hooks are only executed during 
 *		pageviews that are delivered by ProcessWire. They are not 
 *		executed when using ProcessWire's API from other scripts.
 */
 
class ProcessScheduledPosts extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Scheduled Posts', 

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 100, 

			// summary is brief description of what this module is
			'summary' => 'This module allows scheduling (un)publication of pages.',
			
			// Optional URL to more information about the module
			'href' => 'http://processwire.com/talk/index.php/topic,773.0.html',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	// initialize the hook in your AutoLoad module
	public function init() {
		// Run this module on a daily basis using LazyCron
		$this->addHook('LazyCron::everyDay', $this, 'RunScheduledPosts'); 
	}
	
	
	/**
	 * Checks for pages that need to be published or unpublished.
	 *
	 */
	public function RunScheduledPosts() {
		$date = mktime(0, 0, 0, date("m/d/Y")) ; // Get timestamp for current date

		// Select unpublished sites with a publish_from date < the current date and
		// add them to an array.
		$unpublished = wire("pages")->find("status=unpublished, publish_from<$date");
		foreach($unpublished as $p) {
			$p->setOutputFormatting(false); // Avoid date being formated.
			// Remove pages with a publish_until date < current date from the array. These
			// should not be published.
			if($p->publish_until > 0 && $p->publish_until < $date) $unpublished->remove($p); 
		}
		// Publish all the remaining pages in the array
		foreach($unpublished as $p) {
			$p->removeStatus(Page::statusUnpublished); 
			$p->save(); 
			// Following 2 lines are for debug only
			/* 
			echo "$p - Page $p->title is published - Publish from $p->publish_from - 
			Publish until $p->publish_until - Current time/date: $date <br />";	
			*/ 
			
		}

		// Select published sites with a publish_until date add them to an array.
		$published = wire("pages")->find("status=published, publish_until>0");
		foreach($published as $p) {
			$p->setOutputFormatting(false); // Avoid date being formated.
			// Remove pages with a publish_until date >= current date from the array. 
			// These should not be unpublished.
			if($p->publish_until >= $date) $published->remove($p);
		}
		// Unpublish all the remaining pages in the array
		foreach($published as $p) {
			$p->addStatus(Page::statusUnpublished); 
			$p->save(); 
			// Following 2 lines are for debug only
			/* 
			echo "$p - Page $p->title is unpublished - Publish from $p->publish_from - Publish until 
			$p->publish_until - Current time/date: $date <br />";
			*/
		}
	}
	
}
